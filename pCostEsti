#!/usr/bin/python
import numpy as np 
import sys 
import matplotlib.pyplot as plt 
import matplotlib as mpl
import matplotlib.ticker as mtick 


def getFromFile(f):
    data=np.loadtxt(f)
    d=[]
    n=0
    for l in data:
	if l[1]==0:
       	    n+=1	
	    d.append([])
	d[n-1].append(l)
    return d 

def getStr(f):
    f = open(f,'r')
    strs=f.readlines()
    f.close()
    return strs

def getHybro(f):
    data=np.loadtxt(f)
    f = open(f,'r')
    strs=f.readlines()
    f.close()
    d=[]
    for st in strs:
        d.append(st.split())
    print d
    return d 


def pCycle(d,l,c,lw):
    line,=plt.plot(d[1],d[0],label =l, color=c,linestyle='-')
    return line
def save(a,f):
    d=np.transpose(a)
    f = open(f,'w')
    for row in d:
        for line in row:
            f.write(str(line))
            f.write('\t')
        f.write('\n')
    f.close()
        
def vecMinSca(v,s):
    o=[]
    for ve in v:
        o.append(ve-s)
    return o
def reverse(vec):
    o=[] 
    for v in vec: o.append(vec[-1]-v)
    return o

#Colors
cs = ['#E08031','#C7CEB2','#199475','#0B6E48','#044D22','darkred']
#cs = ['#44615E','#2E3161','#52090B','#948B53','#1A0A4A','darkred']
linestyle=['-','--']
labels = ('Pos.', 'Neg.', 'Electrolyte', 'Curr. Collector','Separator')



# plot
plt.style.use('z')
mpl.rcParams['figure.subplot.left'] =0.1
mpl.rcParams['figure.subplot.right'] =0.95 
mpl.rcParams['figure.subplot.top'] =0.95 
mpl.rcParams['figure.subplot.bottom'] =0.35
mpl.rcParams['xtick.direction'] ='out'

fig=plt.figure(figsize=(8,4),dpi=600)
ax=plt.subplot(111)


data=np.loadtxt('cost')
td=np.array(data).transpose()



N = len(data) 
ind = np.arange(N)    # the x locations for the groups
width = 0.4       # the width of the bars: can also be len(x) sequence
print N
bars=[]
i=0
bm=N*[0]
for d in td[:-1]:
    print bm
    bars.append(ax.bar(ind+width, td[i],width,bottom=bm,linewidth=0, color=cs[i],label=labels[i]))
    bm=bm+td[i]
    i=i+1

labels=getStr('str')
#lbs=ax.set_xticklabels(getStr('str'),rotation=45)
plt.xticks(ind+1.5*width,labels,rotation=70)
for tick in ax.xaxis.get_major_ticks():
    tick.tick2On=False



plt.yticks(np.arange(0, 200, 50))

plt.ylabel('Cost estimated ($ \$\cdot kWh^{-1}$)')
#plt.xlabel('Pore width ($\AA$)')
plt.tight_layout()

plt.legend(loc=2,framealpha=0.4)
plt.savefig('cost.pdf')
